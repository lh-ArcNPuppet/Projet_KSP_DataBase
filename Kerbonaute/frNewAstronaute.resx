<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pctBox_PictureType.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>